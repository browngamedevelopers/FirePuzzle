<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.lightlevel=surface_create(room_width,room_height);
depth = -5000000
darknessamount = .85;
drawingcolor = c_black;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>surface_set_target(global.lightlevel);              
draw_clear_alpha(drawingcolor,darknessamount);
draw_set_blend_mode(bm_subtract);

var j;
var i;
var numcircles = 30;
var largestsize;
if(instance_exists(objAnyPlayer)) {
    draw_set_alpha(1/numcircles);
    for (i=0; i&lt;= numcircles; i++){
    largestsize = objAnyPlayer.lightSize;
        draw_circle(objAnyPlayer.x, objAnyPlayer.y,
             largestsize - (largestsize/numcircles)*i, false);
    }
}


/*draw_set_alpha(1/numcircles);
for (i=0; i&lt;= numcircles; i++){
    largestsize = objEndLevel.lightSize;
    draw_circle(objEndLevel.x, objPlayer.y,
         largestsize - (largestsize/numcircles)*i, false);
}*/

if(instance_exists(objMouse)){
    numcircles = 30;
    //largestsize = 64;
    draw_set_alpha(1/numcircles);
    for (i=0; i&lt;= numcircles; i++){
        largestsize = objMouse.lightSize;
        draw_circle(mouse_x, mouse_y,
             largestsize - (largestsize/numcircles)*i, false);
    }
}

var lightalamp;
//largestsize = 64;
numcircles = 25;
draw_set_alpha(1/numcircles);
for (i = 0; i &lt; instance_number(objAllLamps); i += 1){
    
   lightalamp = instance_find(objAllLamps,i);
   if(lightalamp.on){
        largestsize = lightalamp.lightSize;
       for (j=0; j&lt;= numcircles; j++){
           draw_circle(lightalamp.x, lightalamp.y, largestsize - (largestsize/numcircles)*j, false);
       }
   }
}

var lightabridge;
//largestsize = 64;
numcircles = 25;
draw_set_alpha(1/numcircles);
for (i = 0; i &lt; instance_number(objBridge); i += 1){
   lightabridge = instance_find(objBridge,i);
    largestsize = lightabridge.lightSize;
   for (j=0; j&lt;= numcircles; j++){
        draw_circle(lightabridge.x, lightabridge.y,  largestsize - (largestsize/numcircles)*j, false);
   }
}
   
draw_set_alpha(1);
draw_set_blend_mode(bm_normal);
surface_reset_target();


if surface_exists(global.lightlevel){
    draw_surface(global.lightlevel,0,0);
} else {
    global.lightlevel=surface_create(room_width,room_height);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
